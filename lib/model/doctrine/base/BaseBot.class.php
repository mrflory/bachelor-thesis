<?php

/**
 * BaseBot
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $auction_id
 * @property integer $bidder_id
 * @property boolean $active
 * @property integer $init_numbids
 * @property decimal $start
 * @property decimal $end
 * @property decimal $price
 * @property integer $countdown
 * @property integer $numbids
 * @property timestamp $last_use
 * @property Auction $Auction
 * @property Bidder $Bidder
 * @property Doctrine_Collection $Bids
 * 
 * @method integer             getAuctionId()    Returns the current record's "auction_id" value
 * @method integer             getBidderId()     Returns the current record's "bidder_id" value
 * @method boolean             getActive()       Returns the current record's "active" value
 * @method integer             getInitNumbids()  Returns the current record's "init_numbids" value
 * @method decimal             getStart()        Returns the current record's "start" value
 * @method decimal             getEnd()          Returns the current record's "end" value
 * @method decimal             getPrice()        Returns the current record's "price" value
 * @method integer             getCountdown()    Returns the current record's "countdown" value
 * @method integer             getNumbids()      Returns the current record's "numbids" value
 * @method timestamp           getLastUse()      Returns the current record's "last_use" value
 * @method Auction             getAuction()      Returns the current record's "Auction" value
 * @method Bidder              getBidder()       Returns the current record's "Bidder" value
 * @method Doctrine_Collection getBids()         Returns the current record's "Bids" collection
 * @method Bot                 setAuctionId()    Sets the current record's "auction_id" value
 * @method Bot                 setBidderId()     Sets the current record's "bidder_id" value
 * @method Bot                 setActive()       Sets the current record's "active" value
 * @method Bot                 setInitNumbids()  Sets the current record's "init_numbids" value
 * @method Bot                 setStart()        Sets the current record's "start" value
 * @method Bot                 setEnd()          Sets the current record's "end" value
 * @method Bot                 setPrice()        Sets the current record's "price" value
 * @method Bot                 setCountdown()    Sets the current record's "countdown" value
 * @method Bot                 setNumbids()      Sets the current record's "numbids" value
 * @method Bot                 setLastUse()      Sets the current record's "last_use" value
 * @method Bot                 setAuction()      Sets the current record's "Auction" value
 * @method Bot                 setBidder()       Sets the current record's "Bidder" value
 * @method Bot                 setBids()         Sets the current record's "Bids" collection
 * 
 * @package    bachelor
 * @subpackage model
 * @author     Florian Stallmann
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseBot extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('bot');
        $this->hasColumn('auction_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('bidder_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('active', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => false,
             ));
        $this->hasColumn('init_numbids', 'integer', 10, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 10,
             ));
        $this->hasColumn('start', 'decimal', 10, array(
             'type' => 'decimal',
             'notnull' => true,
             'length' => 10,
             ));
        $this->hasColumn('end', 'decimal', 10, array(
             'type' => 'decimal',
             'notnull' => true,
             'length' => 10,
             ));
        $this->hasColumn('price', 'decimal', 10, array(
             'type' => 'decimal',
             'notnull' => true,
             'length' => 10,
             ));
        $this->hasColumn('countdown', 'integer', 10, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 10,
             ));
        $this->hasColumn('numbids', 'integer', 10, array(
             'type' => 'integer',
             'length' => 10,
             ));
        $this->hasColumn('last_use', 'timestamp', null, array(
             'type' => 'timestamp',
             ));


        $this->index('active', array(
             'fields' => 
             array(
              0 => 'bidder_id',
              1 => 'active',
              2 => 'auction_id',
              3 => 'numbids',
              4 => 'end',
              5 => 'start',
             ),
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Auction', array(
             'local' => 'auction_id',
             'foreign' => 'id'));

        $this->hasOne('Bidder', array(
             'local' => 'bidder_id',
             'foreign' => 'id'));

        $this->hasMany('Bid as Bids', array(
             'local' => 'id',
             'foreign' => 'bot_id'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             ));
        $this->actAs($timestampable0);
    }
}